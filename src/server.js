// Load environment variables
// For local development: load from config/.env
// For Netlify: uses environment variables set in dashboard
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../config/.env') });
// Also try to load from root .env if it exists (for other environments)
require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { OpenAI } = require('openai');
const { marked } = require('marked');

// Importar sistema de roteamento centralizado
const AgentRouter = require('./core/AgentRouter');
const AgentsFactory = require('./core/AgentsFactory');

// Importar agentes especializados (mant√©m-se para compatibilidade com agentsFactory)
const resultadosAgent = require('./agents/resultadosAgent');
const classificacoesAgent = require('./agents/classificacoesAgent');
const jogadoresAgent = require('./agents/jogadoresAgent');
const livrosAgent = require('./agents/livrosAgent');
const livroConteudoAgent = require('./agents/livroConteudoAgent');
const biografiasAgent = require('./agents/biografiasAgent');
const presidentesAgent = require('./agents/presidentesAgent');
const fundacaoAgent = require('./agents/fundacaoAgent');
const epocaDetalhadaAgent = require('./agents/epocaDetalhadaAgent');
const estatisticasAgent = require('./agents/estatisticasAgent');

// Configura√ß√£o OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const app = express();
app.use(bodyParser.json());
app.use(cors());

// Inicializar roteador de agentes √öNICO
const agentRouter = AgentsFactory.createRouter();

// Configurar marked para renderizar com mais seguran√ßa
marked.setOptions({
  breaks: true,
  gfm: true,
  pedantic: false
});

// Fun√ß√£o helper para converter markdown em HTML com classes CSS
function renderMarkdown(markdown) {
  if (!markdown || typeof markdown !== 'string') return '';
  let html = marked(markdown);
  // Adicionar classes CSS para melhor estilo
  html = html.replace(/<h1>/g, '<h1 class="markdown-h1">');
  html = html.replace(/<h2>/g, '<h2 class="markdown-h2">');
  html = html.replace(/<h3>/g, '<h3 class="markdown-h3">');
  html = html.replace(/<p>/g, '<p class="markdown-p">');
  html = html.replace(/<ul>/g, '<ul class="markdown-ul">');
  html = html.replace(/<ol>/g, '<ol class="markdown-ol">');
  html = html.replace(/<li>/g, '<li class="markdown-li">');
  html = html.replace(/<code>/g, '<code class="markdown-code">');
  html = html.replace(/<blockquote>/g, '<blockquote class="markdown-blockquote">');
  return html;
}

// Servir ficheiros est√°ticos da pasta public
app.use(express.static(path.join(__dirname, '../public')));

// Servir fotografias da pasta dados
app.use('/fotografias', express.static(path.join(__dirname, '../dados/fotografias')));

app.post('/api/chat', async (req, res) => {
  try {
    const userMessage = req.body.message || '';
    const lowerMsg = userMessage.toLowerCase();

    // DETEC√á√ÉO AUTOM√ÅTICA DE √âPOCA: Padr√µes como 1990/91, 90/91, 1990-91, etc.
    // Prioridade m√°xima para √©poca - se encontrar padr√£o, tenta processar direto
    const epocaMatch = userMessage.match(/\b(\d{2,4})[\/-](\d{2,4})\b/);
    if (epocaMatch) {
      console.log('[DEBUG] Detectada query de √©poca:', epocaMatch[0]);
      const relatorioEpoca = epocaDetalhadaAgent.getEpocaDetalhada(epocaMatch[0]);
      if (relatorioEpoca) {
        console.log('[DEBUG] Relat√≥rio de √©poca gerado com sucesso');
        return res.json({ reply: renderMarkdown(relatorioEpoca) });
      }
      console.log('[DEBUG] Nenhum dado encontrado para √©poca:', epocaMatch[0]);
    }

    // CASO ESPECIAL: Perguntas sobre √©poca 1989/90
    if ((lowerMsg.includes('1989') || lowerMsg.includes('89')) &&
        (lowerMsg.includes('/90') || lowerMsg.includes('90'))) {
      const response1989 = `A √©poca 1989/1990 foi hist√≥rica para os Le√µes de Faro! üèÜ

O Farense jogou na **II Divis√£o** (segundo escal√£o) e teve uma temporada fant√°stica:

**Campeonato:**
- üèÜ **1¬∫ LUGAR - CAMPE√ÉO da II Divis√£o Zona Sul**
- **55 pontos** em 34 jogos
- 25 vit√≥rias, 5 empates, 4 derrotas
- 80 golos marcados, 23 sofridos
- ‚¨ÜÔ∏è **PROMO√á√ÉO garantida √† I Divis√£o**

**Ta√ßa de Portugal:**
- ü•à **FINALISTA** (perdeu 2-0 vs Estrela da Amadora)
- Melhor participa√ß√£o de sempre na Ta√ßa!

Foi uma √©poca hist√≥rica: campe√µes da II Divis√£o e finalistas da Ta√ßa de Portugal, regressando ao escal√£o principal do futebol portugu√™s! ‚öΩ`;

      return res.json({ reply: renderMarkdown(response1989) });
    }

    // Usar AgentRouter para roteamento √∫nico e centralizado
    console.log('[DEBUG] Consultando AgentRouter para mensagem:', userMessage.substring(0, 50) + '...');
    const agentResult = agentRouter.findAgent(userMessage);

    // Base prompt EXTREMAMENTE RESTRITIVO - NUNCA INVENTAR
    let systemPrompt = `√âs um assistente virtual especializado no Sporting Clube Farense.

REGRAS ABSOLUTAS E INVIOL√ÅVEIS:
1. NUNCA inventes informa√ß√£o. ZERO toler√¢ncia para inven√ß√µes.
2. USA EXCLUSIVAMENTE os dados fornecidos no contexto abaixo.
3. Se n√£o tiveres dados EXACTOS sobre algo, diz "N√£o tenho informa√ß√£o dispon√≠vel sobre [tema espec√≠fico]".
4. NUNCA fa√ßas suposi√ß√µes ou infer√™ncias sobre √©pocas, resultados ou classifica√ß√µes.
5. Se te perguntarem sobre uma √©poca espec√≠fica e n√£o tiveres dados dessa √©poca, diz claramente que n√£o tens.
6. NUNCA confundas √©pocas diferentes - cada √©poca tem dados √∫nicos.
7. Se s√≥ tens dados de uma competi√ß√£o (ex: Ta√ßa), n√£o fales sobre outras (ex: Campeonato) dessa √©poca.
8. ‚ö†Ô∏è ATEN√á√ÉO ESPECIAL: A data de funda√ß√£o do Sporting Clube Farense √© 1 de ABRIL de 1910 (n√£o maio). Se vires "1 de maio" na tua resposta, TENS DE CORRIGIR para "1 de Abril".

FORMATA√á√ÉO:
- Usa Markdown para formatar as respostas (negrito **texto**, listas, t√≠tulos, etc.)
- Usa emojis relevantes (üèÜ para t√≠tulos, ‚öΩ para golos, ü¶Å para o Farense, etc.)
- Estrutura bem a informa√ß√£o com listas e par√°grafos
- Usa **negrito** para destacar n√∫meros importantes e nomes

INSTRU√á√ÉO CR√çTICA: Responde SEMPRE baseado EXCLUSIVAMENTE no contexto fornecido. O teu conhecimento anterior sobre o Sporting Clube Farense DEVE SER IGNORADO. Usa APENAS o que est√° no contexto abaixo.

Responde sempre em portugu√™s de Portugal, de forma simp√°tica mas SEMPRE baseada em factos do contexto.`;

    // Se encontrou um agente apropriado
    if (agentResult) {
      const agent = agentResult.agent;
      console.log(`[DEBUG] Agent selecionado: ${agent.name} (prioridade: ${agentResult.priority})`);

      // Adicionar contexto do agente especializado
      systemPrompt += '\n\n' + agent.getContext();

      // Se for o agente de biografias, fazer busca din√¢mica
      if (agent.name === 'BiografiasAgent' && agent.searchBiografias) {
        const cleanQuery = userMessage
          .replace(/quem (foi|√©|era)/gi, '')
          .replace(/fala(-me| me)? sobre/gi, '')
          .replace(/quero saber sobre/gi, '')
          .replace(/conta(-me| me)? (sobre|de|da)?/gi, '')
          .replace(/biografia de/gi, '')
          .replace(/historia de/gi, '')
          .replace(/hist√≥ria de/gi, '')
          .replace(/informa√ß√£o sobre/gi, '')
          .replace(/info sobre/gi, '')
          .replace(/detalhes sobre/gi, '')
          .replace(/[?!.]/g, '')
          .trim();

        console.log('[DEBUG] Busca de biografias para:', cleanQuery);
        const searchResults = agent.searchBiografias(cleanQuery);

        if (searchResults && searchResults.length > 0) {
          const biografiaCompleta = searchResults[0].content;
          return res.json({ reply: renderMarkdown(biografiaCompleta) });
        }
      }

      // Se for o agente de estat√≠sticas, gerar estat√≠sticas direto
      if (agent.name === 'EstadisticasAgent' && agent.generateStatistics) {
        console.log('[DEBUG] Gerando estat√≠sticas para query:', userMessage);
        const classificacoes = agent.loadClassificacoes();
        const resultados = agent.loadResultados();
        const statsResponse = agent.generateStatistics(userMessage, classificacoes, resultados);

        if (statsResponse && statsResponse.trim()) {
          console.log('[DEBUG] Estat√≠sticas geradas com sucesso');
          return res.json({ reply: renderMarkdown(statsResponse) });
        }
      }

      systemPrompt += '\n\nLEMBRETE FINAL: Usa APENAS a informa√ß√£o acima. Se algo n√£o est√° explicitamente mencionado, n√£o inventes!';
    } else {
      console.log('[DEBUG] Nenhum agent espec√≠fico encontrado - usando prompt gen√©rico');
    }

    console.log('[DEBUG] Tamanho do system prompt:', systemPrompt.length, 'caracteres');

    // Chamar a API da OpenAI com temperatura ULTRA-BAIXA para evitar criatividade
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userMessage }
      ],
      temperature: 0.0,
      max_tokens: 1500,
      top_p: 0.1,
      frequency_penalty: 1.0,
      presence_penalty: 0.5
    });

    const chatbotReply = response.choices[0].message.content;
    res.json({ reply: renderMarkdown(chatbotReply) });
  } catch (error) {
    console.error('Erro ao processar a mensagem:', error);

    // Verificar se a pergunta √© sobre Paco Fortes
    const lowerMsg = req.body.message?.toLowerCase() || '';
    if (lowerMsg.includes('paco') || lowerMsg.includes('fortes')) {
      const fallbackReply = "Paco Fortes foi um importante jogador e treinador do Sporting Clube Farense. Como treinador, levou os Le√µes de Faro √† sua melhor classifica√ß√£o de sempre (5¬∫ lugar) na temporada 1994/95, qualificando o clube para a Ta√ßa UEFA pela primeira vez na sua hist√≥ria. Nascido em Barcelona, √© considerado 'o catal√£o mais farense de que h√° mem√≥ria'.";
      return res.json({ reply: renderMarkdown(fallbackReply) });
    }

    res.status(500).json({
      error: 'Ocorreu um erro ao processar a tua mensagem. Por favor, tenta novamente mais tarde.',
      details: error.message
    });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Servidor a correr na porta ${PORT}`);
}); 